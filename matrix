#!/bin/bash

#Program allows user to find dimension, mean, and tranpsose a matrix and add and mutliply matrices and display the resutls

#Temp files
TMP1=./"1temp$$"
TMP2=./"2temp$$"
TMP3=./"3temp$$"

trap "cleanup; echo 'Inter'; exit 1" INT HUP TERM SIGHUP #Cleans up program in case of interrupt 

#Gets the dimension of a matrix. Returns two variables, rowNum and colNum
getDims(){
	rowNum=0
	colNum=0
	if [ "$#" -eq 1 ]; then #if agr passed not equal then show error
		while read row
		do	
			if (($rowNum == 0)); then
				for i in $row
				do
					colNum=`expr $colNum + 1` 
				done 
			fi
		rowNum=`expr $rowNum + 1`
		done < $1
	else
		echo "Error: Too many args" 1>&2
		cleanup
		exit 1
	fi
}
 
 #Tranpsoes a 
transpose(){
	argChecker 1 "$#" #checks agr number
	getDims $@
	#Transpose code based on
	#http://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
	for j in $(seq 1 $colNum)
	do
		cut -f"$j" $1 | paste -s >> $TMP2
	done
	cat $TMP2
}

#Prints out dimension
dims(){
	argChecker 1 "$#"
	getDims $@
	echo -e $rowNum $colNum
}

#Makes sure the args number is correct
argChecker(){	
	if [ $1 != $2 ]; then
		echo "Error: Not correct number of args" 1>&2
		cleanup
		exit 1
	fi
}

#Finds mean of matrix
mean(){
	argChecker 1 "$#"
	getDims $@
	#Transpose code based on
	#http://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
	sum=0
	for j in $(seq 1 $colNum)
	do
		cut -f"$j" $1 | paste -s > $TMP1
		while read line
		do
			for num in $line
			do
				sum=`expr $sum + $num`
				count=`expr $count + 1`
			done
		done <<< "$(cat $TMP1)"
		round=1
		if (($sum <= 0)); then
			round=0
		fi
		mean=$(( ($sum + ( $count / 2 ) * ($round * 2 - 1)) / $count ))
		echo -n $mean
		if  (($colNum !=  $j)); then
			echo -en '\t'
		fi
		rm -f $TMP1
		count=0
		sum=0
	done
	echo ""
}

#Add matrices together
add(){
	argChecker 2 "$#"
	getDims $1
	col1=$colNum
	row1=$rowNum

	getDims $2

	if [ $col1 -eq $colNum ] && [ $row1 -eq $rowNum ]; then
		while read row
		do
			for i in $row
			do
				echo $i >> $TMP1	
			done 
		done < $1 

		while read row
		do
		for i in $row
			do
				echo $i >> $TMP2
			done 
		done < $2
		
		count=1
		while read num
		do
			sum=`expr $(tail -n +"$count" $TMP2 |head -n 1) + $(tail -n +"$count" $TMP1 |head -n 1)`
			if (( $count % $colNum == 0 )); then
				echo $sum
			else
				echo -ne $sum'\t'
			fi
			count=`expr $count + 1`
		done < $TMP2
	else
		echo "Error: Size of matrix are different" 1>&2
		cleanup
		exit 1
	fi
}

#Multiply matrices together
multiply(){
	argChecker 2 "$#"
	
	getDims $1
	col1=$colNum
	row1=$rowNum
	getDims $2
	
	if [ $col1 -eq $rowNum ]; then
		for i in $(seq 1 $row1)
		do
			sed "${i}q;d" $1 > $TMP2
			for j in $(seq 1 $colNum)
			do
				cut -f"$j" $2 > $TMP1
				count=1
				total=0
				while read num
				do
					num=$(cut -f"$count" $TMP2)
					total=`expr $total + $(tail -n +"$count" $TMP1 |head -n 1) \* $num`
					count=`expr $count + 1`
				done < $TMP1
				if [ $j -lt $colNum ]; then
					echo -ne $total'\t'
				else
					echo $total
				fi
			done
		done
	else
		echo "Error: Number of column in first matrix and number of rows in second matrix are different" 1>&2
		cleanup
		exit 1
	fi
}

#Reomces the temp file
cleanup(){
	rm -f $TMP1
	rm -f $TMP2
	rm -f $TMP3
}

#Checks to see if the command is valid
case $1 in
	multiply)
		#makes sure there are 2 matrix to multiply
		if [ "$#" -ne 3 ]; then
			echo "ERROR: Not correct number of agr!" 1>&2
			cleanup
			exit 1
		fi
		;;
	add)
		#makes sure there are 2 matrix to add
		if [ "$#" -ne 3 ]; then
			echo "ERROR: Not correct number of agr!" 1>&2
			cleanup
			exit 1
		fi
		;;
	mean)
		;;
	transpose)
		;;
	dims)
		;;
	*)
		#if command is not avialable then print error
		echo "Error: Command unavaialable" 1>&2
		cleanup
		exit 1
esac
	
#To read file or stdin
if [ "$#" -ge 2 ]; then
	for arg in "${@:2}"; do
		#Make sure file is readable and existing
		if [ ! -r $arg ]; then	
			echo "Error: File $arg not found or readable!" 1>&2
			cleanup
			exit 1
		fi
	done
	$1 "${@:2}"
else
	cat > $TMP3
	
	#Make sure inputs is something
	wcount=($(wc -c < $TMP3 ))
	if [ $wcount -ne 0 ]; then
		$1 $TMP3
	else
		echo "Error: Not data found!" 1>&2
		cleanup
		exit 1
	fi
fi

#cleanup temp files
cleanup